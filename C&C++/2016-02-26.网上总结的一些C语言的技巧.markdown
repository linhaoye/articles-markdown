####前言
c语言的tricks大多较为晦涩, 需要循充渐进的理解. 它要求我们对编译器/c语言标准都有一定了解.

比如整数溢出的问题:
```c
a = b + c;
```
当b和c加起大于int范围时(`INT_MAX`), a就变成一个负数. 这有时会令人十分烦躁, 尤其在debug的时候.
当然, 标准会告诉你每次都去检查它没有意义, 我们要的只是一个高速的语言. 类似c语言的雷区还有很多.

####sizeof表达式
```c
int main(void)
{
	int x = 5;
	printf("%d and ", sizeof(x++)); // note 1
	printf("%d\n", x); // note 2
	return 0;
}
```
上面会打印什么?它会找印出:
```
4 and 5
```
因为`sizeof`是编译时行为, 运行时不会执行.

####问: 以下这个语句是什么意思?
```c
!ErrorHasOccured() ??!??! HandleError();
```
它叫`trigraph`, 以上会被翻译为
```c
!ErrorHasOccured() || HandleError();
```

类似的还有:
```c
#include <stdio.h>

int main(void)
{
	int arr<::> = <%10, 20, 30%>; //note 1
	printf("The second array element is <%d>.\n", arr<:1:>); //note 2
	return 0;
}
```
上面的执行结果是打印数组的每二个元素.

它叫`digraph`, note 1,2会被翻译为
```c
int arr[] = {10, 20, 30};
printf("The second array element is <%d>.\n", arr[1]);
```

####类型推断
C++1x可以用`auto`来省略类型声明, 而C的`auto`关键字意思完全不同, 但是它可忽略(`auto`意思是非`static`, 和不写一样), C有`__typeof__`
```c
#define var(left, right) __typeof__(right) left = (right)
```

然后用起来就像这样:
```c
var (s, 1LL); //相当于 long long s = 1LL;
```

####C有一个鲜为人知的运算符叫"趋向于", 写作`-->`. 比如说实现一个倒数程序:
```c
#include <stdio.h>

int main(void)
{
	int x = 10;
	while (x --> 0)
	{
		printf("%d ", x);	
	}

	return 0;
}
```
上面程序会打印出:
```
9 8 7 6 5 4 3 2 1
```

####字符串的连接
```c
#define PATH "/var/www"
fd = open(PATH "/log_file", flags);
```
在c语言中, 两个相邻的字符串会被拼接成一个字符串.

####结构体的初始化
注意它不是一般意义的全0初始化, 而逻辑0初始化, 这里引用一段stackoverflow上的英文:
```
memset/calloc do “all bytes zero” (i.e. physical zeroes), which is indeed not defined for all types.
{ 0 } is guaranteed to intilaize everything with proper logical zero values. Pointers, for example, are guranteed to get their proper null values, even if the null-value on the given platform is 0xBAADFOOD
```

```c
struct my_struct a = {0};
```